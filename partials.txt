Variables 

roll, pitch, yaw, p, q, r, u, v, w, x, y, z, 


System 

np.array([
[p + q*sin_roll*tan_pitch + r*cos_roll*tan_pitch, ],
[q*cos_roll - r*sin_pitch, ],
[(q*sin_roll + r*cos_roll)/cos_pitch, ],
[(q*r*(iy - iz) + tx)/ix, ],
[(-p*r*(ix - iz) + ty)/iy, ],
[(p*q*(ix - iy) + tz)/iz, ],
[-g*sin_pitch - q*w + r*v, ],
[g*sin_roll*cos_pitch + p*w - r*u, ],
[-ft/m + g*cos_pitch*cos_roll - p*v + q*u, ],
[u*cos_pitch*cos_yaw + v*(sin_pitch*sin_roll*cos_yaw - sin_yaw*cos_roll) + w*(sin_pitch*cos_roll*cos_yaw + sin_roll*sin_yaw), ],
[u*sin_yaw*cos_pitch + v*(sin_pitch*sin_roll*sin_yaw + cos_roll*cos_yaw) + w*(sin_pitch*sin_yaw*cos_roll - sin_roll*cos_yaw), ],
[-u*sin_pitch + v*sin_roll*cos_pitch + w*cos_pitch*cos_roll, ],
], dtype = np.float64)


Jacobian (A)

np.array([
[(q*cos_roll - r*sin_roll)*tan_pitch, (q*sin_roll + r*cos_roll)/cos_pitch**2, 0, 1, sin_roll*tan_pitch, cos_roll*tan_pitch, 0, 0, 0, 0, 0, 0, ],
[-q*sin_roll, -r*cos_pitch, 0, 0, cos_roll, -sin_pitch, 0, 0, 0, 0, 0, 0, ],
[(q*cos_roll - r*sin_roll)/cos_pitch, (q*sin_roll + r*cos_roll)*sin_pitch/cos_pitch**2, 0, 0, sin_roll/cos_pitch, cos_roll/cos_pitch, 0, 0, 0, 0, 0, 0, ],
[0, 0, 0, 0, r*(iy - iz)/ix, q*(iy - iz)/ix, 0, 0, 0, 0, 0, 0, ],
[0, 0, 0, -r*(ix - iz)/iy, 0, -p*(ix - iz)/iy, 0, 0, 0, 0, 0, 0, ],
[0, 0, 0, q*(ix - iy)/iz, p*(ix - iy)/iz, 0, 0, 0, 0, 0, 0, 0, ],
[0, -g*cos_pitch, 0, 0, -w, v, 0, r, -q, 0, 0, 0, ],
[g*cos_pitch*cos_roll, -g*sin_pitch*sin_roll, 0, w, 0, -u, -r, 0, p, 0, 0, 0, ],
[-g*sin_roll*cos_pitch, -g*sin_pitch*cos_roll, 0, -v, u, 0, q, -p, 0, 0, 0, 0, ],
[v*(sin_pitch*cos_roll*cos_yaw + sin_roll*sin_yaw) - w*(sin_pitch*sin_roll*cos_yaw - sin_yaw*cos_roll), (-u*sin_pitch + v*sin_roll*cos_pitch + w*cos_pitch*cos_roll)*cos_yaw, -u*sin_yaw*cos_pitch - v*(sin_pitch*sin_roll*sin_yaw + cos_roll*cos_yaw) - w*(sin_pitch*sin_yaw*cos_roll - sin_roll*cos_yaw), 0, 0, 0, cos_pitch*cos_yaw, sin_pitch*sin_roll*cos_yaw - sin_yaw*cos_roll, sin_pitch*cos_roll*cos_yaw + sin_roll*sin_yaw, 0, 0, 0, ],
[v*(sin_pitch*sin_yaw*cos_roll - sin_roll*cos_yaw) - w*(sin_pitch*sin_roll*sin_yaw + cos_roll*cos_yaw), (-u*sin_pitch + v*sin_roll*cos_pitch + w*cos_pitch*cos_roll)*sin_yaw, u*cos_pitch*cos_yaw + v*(sin_pitch*sin_roll*cos_yaw - sin_yaw*cos_roll) + w*(sin_pitch*cos_roll*cos_yaw + sin_roll*sin_yaw), 0, 0, 0, sin_yaw*cos_pitch, sin_pitch*sin_roll*sin_yaw + cos_roll*cos_yaw, sin_pitch*sin_yaw*cos_roll - sin_roll*cos_yaw, 0, 0, 0, ],
[(v*cos_roll - w*sin_roll)*cos_pitch, -u*cos_pitch - v*sin_pitch*sin_roll - w*sin_pitch*cos_roll, 0, 0, 0, 0, -sin_pitch, sin_roll*cos_pitch, cos_pitch*cos_roll, 0, 0, 0, ],
], dtype = np.float64)


B

np.array([
[0, 0, 0, 0, ],
[0, 0, 0, 0, ],
[0, 0, 0, 0, ],
[0, 1/ix, 0, 0, ],
[0, 0, 1/iy, 0, ],
[0, 0, 0, 1/iz, ],
[0, 0, 0, 0, ],
[0, 0, 0, 0, ],
[-1/m, 0, 0, 0, ],
[0, 0, 0, 0, ],
[0, 0, 0, 0, ],
[0, 0, 0, 0, ],
], dtype = np.float64)


Hessian

np.array([
[-(q*sin_roll + r*cos_roll)*tan_pitch, 2*(q*sin_roll + r*cos_roll)*tan_pitch/cos_pitch**2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
[-q*cos_roll, r*sin_pitch, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
[-(q*sin_roll + r*cos_roll)/cos_pitch, (q*sin_pitch**2*sin_roll + q*sin_roll + r*sin_pitch**2*cos_roll + r*cos_roll)/cos_pitch**3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
[0, g*sin_pitch, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
[-g*sin_roll*cos_pitch, -g*sin_roll*cos_pitch, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
[-g*cos_pitch*cos_roll, -g*cos_pitch*cos_roll, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
[-v*(sin_pitch*sin_roll*cos_yaw - sin_yaw*cos_roll) - w*(sin_pitch*cos_roll*cos_yaw + sin_roll*sin_yaw), -(u*cos_pitch + v*sin_pitch*sin_roll + w*sin_pitch*cos_roll)*cos_yaw, -u*cos_pitch*cos_yaw - v*(sin_pitch*sin_roll*cos_yaw - sin_yaw*cos_roll) - w*(sin_pitch*cos_roll*cos_yaw + sin_roll*sin_yaw), 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
[-v*(sin_pitch*sin_roll*sin_yaw + cos_roll*cos_yaw) - w*(sin_pitch*sin_yaw*cos_roll - sin_roll*cos_yaw), -(u*cos_pitch + v*sin_pitch*sin_roll + w*sin_pitch*cos_roll)*sin_yaw, -u*sin_yaw*cos_pitch - v*(sin_pitch*sin_roll*sin_yaw + cos_roll*cos_yaw) - w*(sin_pitch*sin_yaw*cos_roll - sin_roll*cos_yaw), 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
[-(v*sin_roll + w*cos_roll)*cos_pitch, u*sin_pitch - v*sin_roll*cos_pitch - w*cos_pitch*cos_roll, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
], dtype = np.float64)


