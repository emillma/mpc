
import numpy as np
from numba import jitclass, float64

keys = [
('g', float64),
('delta', float64),
('m', float64),
('ix', float64),
('iy', float64),
('iz', float64),
('P_r', float64),
('D_r', float64),
('X', float64[:,:]),
('K', float64[:,:]),
]


@jitclass(keys)
class model(object):
    def __init__(self):
        self.g = 9.81
        self.delta = 0.001
        self.m = 1
        self.ix = 0.25
        self.iy = 0.25
        self.iz = 0.25
        self.P_r = 1
        self.D_r = 0
        self.X = np.array([[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]]).astype(np.float64)
        self.K = np.array([[1.02810110409046e-14, 1.30114005036892e-13, -4.54918614676935e-15, 3.18902794786380e-15, 6.75465481296977e-15, 2.89692718063259e-15, -7.81425622063676e-14, 1.36020594790372e-14, -8.01533238258827, -2.27590444544842e-13, 6.17330876939991e-14, -31.6227766016839], [-1.77750244683297e-13, 42.2195700298250, 7.71225186301833e-15, -1.00000000000001, 5.66654965697051, 4.01790084777746e-15, -16.5285101433269, -9.34656238854074e-14, -2.70186192518791e-14, -31.6227766016837, -2.01902763418903e-13, 2.08797223826034e-14], [42.2195700298249, 2.35318744344508e-15, 3.28569399117011e-15, 5.66654965697049, -1.00000000000001, -2.26231304250766e-15, 2.28956580092565e-14, 16.5285101433270, -1.27561117914552e-14, 1.32813796352989e-13, 31.6227766016838, -4.06041786203089e-14], [-5.46214895961366e-15, 4.92491939274732e-14, 3.16227766016838, -2.26231304250766e-15, 4.01790084777746e-15, 2.54699010854049, -1.63618529128297e-14, -3.61281378781760e-15, -1.15877087225303e-14, -2.46622875765888e-14, -1.02500233309851e-14, -2.25242257997161e-14]]).astype(np.float64)

    def reset(self):
        self.X = np.array([[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]]).astype(np.float64)

    def iterate(self):
        ft, mx, my, mz = 0, 0, 0, 0
        ft, p_t, q_t, r_t = -(self.K @ self.X)[:,0]
        roll, pitch, yaw, p, q, r, u, v, w, x, y, z = self.X[:,0]
        x0 = np.tan(pitch)
        x1 = np.sin(roll)
        x2 = q*x1
        x3 = np.cos(roll)
        x4 = r*x3
        x5 = np.cos(pitch)
        x6 = np.sin(pitch)
        x7 = 9.81*x5
        x8 = np.cos(yaw)
        x9 = u*x5
        x10 = np.sin(yaw)
        x11 = x1*x10
        x12 = x3*x8
        x13 = x10*x3
        x14 = x1*x8
        X_d = np.array([[p + x0*x2 + x0*x4], [q*x3 - r*x1], [(x2 + x4)/x5], [4.0*(-q + q_t)], [4.0*(-p + p_t)], [4.0*(-r + r_t)], [-q*w + r*v - 9.81*x6], [p*w - r*u + x1*x7], [-ft - p*v + q*u + x3*x7], [v*(-x13 + x14*x6) + w*(x11 + x12*x6) + x8*x9], [v*(x11*x6 + x12) + w*(x13*x6 - x14) + x10*x9], [-u*x6 + v*x1*x5 + w*x3*x5]])
        self.X = self.X + X_d * self.delta
        return self.X

state = []
a = model()
for i in range(int(5e3)):
    state.append(a.iterate()[:,0])
state = np.array(state)
